package telebotConverter

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/KotFed0t/invest_helper_bot/internal/model"
	"github.com/KotFed0t/invest_helper_bot/internal/model/tg/tgCallback.go"
	tele "gopkg.in/telebot.v4"
)

func PortfolioDetailsResponse(portfolio model.Portfolio) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	sb.WriteString(fmt.Sprintf("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: %s\n", portfolio.Name))
	sb.WriteString(fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å: %.0f ‚ÇΩ\n", portfolio.TotalBalance))
	sb.WriteString(fmt.Sprintf(" - –¢–µ–∫—É—â–∏–π –≤–µ—Å %.1f%%\n\n", portfolio.TotalWeight))

	// –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	sb.WriteString("üìã –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n\n")
	stockBtns := make([]tele.Btn, 0, len(portfolio.Stocks))
	for _, stock := range portfolio.Stocks {
		// –≠–º–æ–¥–∑–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
		emoji := fmt.Sprintf("%dÔ∏è‚É£", stock.Ordinal)

		stockBtns = append(stockBtns, markup.Data(stock.Ticker, tgCallback.AddStock+stock.Ticker))

		sb.WriteString(fmt.Sprintf("%s **%s (%s)**\n", emoji, stock.Ticker, stock.Shortname))
		sb.WriteString(fmt.Sprintf("   ‚ñ∏ –í–µ—Å: **%.1f%%**\n", stock.ActualWeight))

		sb.WriteString(fmt.Sprintf("   ‚ñ∏ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –≤–µ—Å: %.1f%%\n", stock.TargetWeight))

		sb.WriteString(fmt.Sprintf("   ‚ñ∏ –ö–æ–ª-–≤–æ: **%d —à—Ç.**\n", stock.Quantity))

		sb.WriteString(fmt.Sprintf("   ‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %.0f ‚ÇΩ\n", stock.Price))

		sb.WriteString(fmt.Sprintf("   ‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: **%.0f ‚ÇΩ**\n\n", stock.TotalPrice))
	}

	paginationBtns := make([]tele.Btn, 0, 2)
	if portfolio.CurPage > 0 {
		paginationBtns = append(paginationBtns, markup.Data("–ø—Ä–µ–¥—ã–¥—É—â–∞—è", tgCallback.PrevPagePrefix+strconv.Itoa((portfolio.CurPage-1))))
	}

	if portfolio.HasNextPage {
		paginationBtns = append(paginationBtns, markup.Data("—Å–ª–µ–¥—É—é—â–∞—è", tgCallback.NextPagePrefix+strconv.Itoa((portfolio.CurPage+1))))
	}

	addStockBtn := markup.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é", tgCallback.AddStock)
	markup.Inline(
		markup.Row(addStockBtn),
		markup.Row(stockBtns...),
		markup.Row(paginationBtns...),
	)

	return sb.String(), markup
}
