package telebotConverter

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/KotFed0t/invest_helper_bot/internal/model"
	"github.com/KotFed0t/invest_helper_bot/internal/model/moexModel"
	"github.com/KotFed0t/invest_helper_bot/internal/model/tg/tgCallback.go"
	"github.com/shopspring/decimal"
	tele "gopkg.in/telebot.v4"
)

func PortfolioDetailsResponse(portfolio model.PortfolioPage, stocksPerPage int) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	sb.WriteString(fmt.Sprintf("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: %s\n\n", portfolio.PortfolioName))
	sb.WriteString("üí∞ –ë–∞–ª–∞–Ω—Å—ã: \n")
	sb.WriteString(fmt.Sprintf("‚ñ∏ –≤ –∏–Ω–¥–µ–∫—Å–µ: %s ‚ÇΩ\n", portfolio.BalanceInsideIndex.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –≤–Ω–µ –∏–Ω–¥–µ–∫—Å–∞: %s ‚ÇΩ\n\n", portfolio.BalanceOutsideIndex.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å %s %%\n", portfolio.TotalWeight.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("üîÄ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ %s %%\n\n", portfolio.IndexOffset.StringFixed(2)))

	// –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	sb.WriteString("üìã –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n\n")
	stockBtns := make([]tele.Btn, 0, len(portfolio.Stocks))
	for i, stock := range portfolio.Stocks {
		// –≠–º–æ–¥–∑–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
		ordinal := fmt.Sprintf("%d)", i+1+(stocksPerPage*(portfolio.CurPage-1)))

		stockBtns = append(stockBtns, markup.Data(stock.Ticker, tgCallback.EditStockPrefix+stock.Ticker))

		sb.WriteString(fmt.Sprintf("%s %s (%s)\n", ordinal, stock.Ticker, stock.Shortname))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –í–µ—Å: %s %%\n", stock.ActualWeight.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å: %s %%\n", stock.TargetWeight.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –ö–æ–ª-–≤–æ: %d —à—Ç.\n", stock.Quantity))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %s ‚ÇΩ\n", stock.Price.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s ‚ÇΩ\n", stock.TotalPrice.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: %d\n", stock.Lotsize))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –ª–æ—Ç–∞: %s ‚ÇΩ\n\n", stock.Price.Mul(decimal.NewFromInt(int64(stock.Lotsize))).StringFixed(2)))
	}

	paginationBtns := make([]tele.Btn, 0, 3)
	if portfolio.CurPage > 1 {
		paginationBtns = append(paginationBtns, markup.Data("–Ω–∞–∑–∞–¥", tgCallback.ToPortfolioPage+strconv.Itoa((portfolio.CurPage-1))))
	}

	if portfolio.CurPage > 1 || portfolio.TotalPages > portfolio.CurPage {
		paginationBtns = append(paginationBtns, markup.Data(fmt.Sprintf("—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d", portfolio.CurPage, portfolio.TotalPages), tgCallback.PageNumber))
	}

	if portfolio.TotalPages > portfolio.CurPage {
		paginationBtns = append(paginationBtns, markup.Data("–≤–ø–µ—Ä–µ–¥", tgCallback.ToPortfolioPage+strconv.Itoa((portfolio.CurPage+1))))
	}

	addStockBtn := markup.Data("‚úö –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é", tgCallback.AddStock)

	var calculatePurchaseBtn tele.Btn
	if portfolio.StocksCount > portfolio.StocksOutsideIndexCnt {
		calculatePurchaseBtn = markup.Data("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫—É–ø", tgCallback.CalculatePurchase)
	}

	var rebalanceWeights tele.Btn
	if !portfolio.TotalWeight.IsZero() && (portfolio.TotalWeight.LessThan(decimal.NewFromInt(99)) || portfolio.TotalWeight.GreaterThan(decimal.NewFromInt(101))) {
		rebalanceWeights = markup.Data("–≤—ã—Ä–æ–≤–Ω—è—Ç—å –≤–µ—Å–∞", tgCallback.RebalanceWeights)
	}

	var deletePortfolio tele.Btn
	if portfolio.BalanceInsideIndex.IsZero() && portfolio.BalanceOutsideIndex.IsZero() {
		deletePortfolio = markup.Data("‚ö†Ô∏è —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å", tgCallback.InitDeletePortfolio)
	}

	backToPortfolioListBtn := markup.Data("–ö —Å–ø–∏—Å–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π", tgCallback.BackToPortolioList)

	markup.Inline(
		markup.Row(addStockBtn, calculatePurchaseBtn),
		markup.Row(rebalanceWeights),
		markup.Row(stockBtns...),
		markup.Row(paginationBtns...),
		markup.Row(deletePortfolio),
		markup.Row(backToPortfolioListBtn),
	)

	return sb.String(), markup
}

func StockNotFoundMarkup() (markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", tgCallback.BackToPortolio)
	addStockBtn := markup.Data("–≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä", tgCallback.AddStock)
	markup.Inline(
		markup.Row(addStockBtn),
		markup.Row(backToPortfolioBtn),
	)
	return markup
}

func StockDetailResponse(stock model.Stock, stockChanges *model.StockChanges) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	sb := strings.Builder{}

	sb.WriteString(fmt.Sprintf("%s (%s)\n", stock.Ticker, stock.Shortname))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –í–µ—Å: %s %%\n", stock.ActualWeight.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: %s %%\n", stock.TargetWeight.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –ö–æ–ª-–≤–æ: %d —à—Ç.\n", stock.Quantity))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %s ‚ÇΩ\n", stock.Price.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s ‚ÇΩ\n", stock.TotalPrice.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: %d\n", stock.Lotsize))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –ª–æ—Ç–∞: %s ‚ÇΩ\n", stock.Price.Mul(decimal.NewFromInt(int64(stock.Lotsize))).StringFixed(2)))

	row1 := make([]tele.Btn, 0, 2)

	if stock.Quantity > 0 {
		sellStockBtn := markup.Data("–ø—Ä–æ–¥–∞—Ç—å", tgCallback.SellStock)
		row1 = append(row1, sellStockBtn)
	}

	buyStockBtn := markup.Data("–∫—É–ø–∏—Ç—å", tgCallback.BuyStock)
	row1 = append(row1, buyStockBtn)

	changeWeightStockBtn := markup.Data("–∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", tgCallback.ChangeWeight)

	var deleteStockBtn tele.Btn
	if stock.Quantity == 0 {
		deleteStockBtn = markup.Data("‚ö†Ô∏è —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", tgCallback.DeleteStock)
	}

	var changePriceBtn tele.Btn
	var saveBtn tele.Btn

	if stockChanges != nil {
		sb.WriteString("\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n")
		if stockChanges.NewTargetWeight != nil {
			sb.WriteString(fmt.Sprintf("‚ñ∏ –ù–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å: %s %%\n", stockChanges.NewTargetWeight.StringFixed(2)))
		}

		if stockChanges.Quantity != nil {
			var operation string
			if *stockChanges.Quantity < 0 {
				operation = "–ø—Ä–æ–¥–∞–∂–∏"
			} else {
				operation = "–ø–æ–∫—É–ø–∫–∏"
			}

			changePriceBtn = markup.Data(fmt.Sprintf("–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É %s", operation), tgCallback.ChangePrice)

			if *stockChanges.Quantity > 0 {
				sb.WriteString(fmt.Sprintf("‚ñ∏ –ê–∫—Ü–∏–π –∫ –ø–æ–∫—É–ø–∫–µ: %d —à—Ç.\n", *stockChanges.Quantity))
			}

			if *stockChanges.Quantity < 0 {
				sb.WriteString(fmt.Sprintf("‚ñ∏ –ê–∫—Ü–∏–π –∫ –ø—Ä–æ–¥–∞–∂–µ: %d —à—Ç.\n", *stockChanges.Quantity*-1))
			}

			var stockPrice, totalSum string

			if stockChanges.CustomPrice != nil {
				stockPrice = stockChanges.CustomPrice.StringFixed(2)

				totalSum = stockChanges.CustomPrice.
					Mul(decimal.NewFromInt(int64(*stockChanges.Quantity))).
					Abs().
					StringFixed(2)
			} else {
				stockPrice = stock.Price.StringFixed(2)

				totalSum = stock.Price.
					Mul(decimal.NewFromInt(int64(*stockChanges.Quantity))).
					Abs().
					StringFixed(2)
			}
			sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é: %s ‚ÇΩ\n", stockPrice))
			sb.WriteString(fmt.Sprintf("‚ñ∏ –°—É–º–º–∞ %s: %s ‚ÇΩ\n", operation, totalSum))
		}

		saveBtn = markup.Data("—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", tgCallback.SaveStockChanges)
	}

	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", tgCallback.BackToPortolio)

	markup.Inline(
		row1,
		markup.Row(changePriceBtn),
		markup.Row(changeWeightStockBtn),
		markup.Row(deleteStockBtn),
		markup.Row(backToPortfolioBtn),
		markup.Row(saveBtn),
	)

	return sb.String(), markup
}

func StockAddResponse(stock moexModel.StockInfo) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	sb := strings.Builder{}

	sb.WriteString(fmt.Sprintf("%s (%s)\n", stock.Ticker, stock.Shortname))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %s ‚ÇΩ\n", stock.Price.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: %d\n", stock.Lotsize))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –ª–æ—Ç–∞: %s ‚ÇΩ\n", stock.Price.Mul(decimal.NewFromInt(int64(stock.Lotsize))).StringFixed(2)))

	addToPortfolioBtn := markup.Data("–¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", tgCallback.AddStockToPortfolio)

	addAnotherStockBtn := markup.Data("–≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä", tgCallback.AddStock)

	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", tgCallback.BackToPortolio)

	markup.Inline(
		markup.Row(addToPortfolioBtn),
		markup.Row(addAnotherStockBtn),
		markup.Row(backToPortfolioBtn),
	)

	return sb.String(), markup
}

func CalculatedStockPurchaseResponse(stocks []model.StockPurchase, purchaseSum decimal.Decimal) (texts []string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	sb := strings.Builder{}
	actualPurchaseSum := decimal.NewFromInt(0)

	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", tgCallback.BackToPortolio)
	markup.Inline(
		markup.Row(backToPortfolioBtn),
	)

	for i, stock := range stocks {
		ordinal := fmt.Sprintf("%d)", i+1)
		sb.WriteString(fmt.Sprintf("%s %s (%s)\n", ordinal, stock.Ticker, stock.Shortname))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –ª–æ—Ç–æ–≤: %d —à—Ç\n", stock.LotsQuantity.IntPart()))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –∞–∫—Ü–∏–π: %d —à—Ç\n", int64(stock.LotSize) * stock.LotsQuantity.IntPart()))

		sum := stock.StockPrice.Mul(decimal.NewFromInt(stock.LotsQuantity.IntPart() * int64(stock.LotSize)))
		actualPurchaseSum = actualPurchaseSum.Add(sum)
		sb.WriteString(fmt.Sprintf("‚ñ∏ –Ω–∞ —Å—É–º–º—É: %s ‚ÇΩ\n\n", sum.StringFixed(2)))

		if (i+1)%50 == 0 {
			texts = append(texts, sb.String())
			sb = strings.Builder{}
		}
	}

	sb.WriteString("–ò—Ç–æ–≥–∏:\n")
	sb.WriteString(fmt.Sprintf("‚ñ∏ –°—É–º–º–∞ –¥–æ–∫—É–ø–∫–∏: %s ‚ÇΩ\n", actualPurchaseSum.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: %s ‚ÇΩ\n", purchaseSum.Sub(actualPurchaseSum).StringFixed(2)))

	texts = append(texts, sb.String())
	return texts, markup
}

func PortfolioListResponse(portfolios []model.Portfolio, portfoliosPerPage, curPage int, hasNextPage bool) (texts string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	sb := strings.Builder{}

	if len(portfolios) == 0 {
		return "—Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –ø—É—Å—Ç", markup
	}

	portfolioBtnsRows := 0
	if len(portfolios)%5 == 0 {
		portfolioBtnsRows = len(portfolios) / 5
	} else {
		portfolioBtnsRows = len(portfolios)/5 + 1
	}

	menuRows := make([]tele.Row, 0, portfolioBtnsRows+1)

	sb.WriteString("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π:\n\n")
	for i, portfolio := range portfolios {
		if i%5 == 0 {
			menuRows = append(menuRows, make(tele.Row, 0, 5))
		}
		ordinal := fmt.Sprintf("%d)", i+1+(portfoliosPerPage*(curPage-1)))
		sb.WriteString(fmt.Sprintf("%s %s\n\n", ordinal, portfolio.PortfolioName))
		btn := markup.Data(portfolio.PortfolioName, tgCallback.EditPortfolioPrefix+strconv.FormatInt(portfolio.PortfolioID, 10))
		menuRows[len(menuRows)-1] = append(menuRows[len(menuRows)-1], btn)
	}

	paginationBtns := make([]tele.Btn, 0)
	if curPage > 1 {
		paginationBtns = append(paginationBtns, markup.Data("–Ω–∞–∑–∞–¥", tgCallback.ToPortfolioListPage+strconv.Itoa((curPage-1))))
	}

	if curPage > 1 || hasNextPage {
		paginationBtns = append(paginationBtns, markup.Data(fmt.Sprintf("—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d", curPage), tgCallback.PageNumber))
	}

	if hasNextPage {
		paginationBtns = append(paginationBtns, markup.Data("–≤–ø–µ—Ä–µ–¥", tgCallback.ToPortfolioListPage+strconv.Itoa((curPage+1))))
	}

	generateReportBtn := markup.Data("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", tgCallback.GenerateReport)
	
	menuRows = append(menuRows, markup.Row(generateReportBtn), markup.Row(paginationBtns...))

	markup.Inline(menuRows...)

	return sb.String(), markup
}

func DeletePortfolioConfirmation() (markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", tgCallback.BackToPortolio)
	deletePortfolioBtn := markup.Data("–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", tgCallback.ProcessDeletePortfolio)
	markup.Inline(
		markup.Row(backToPortfolioBtn),
		markup.Row(deletePortfolioBtn),
	)
	return markup
}
