package telebotConverter

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/KotFed0t/invest_helper_bot/internal/model"
	"github.com/KotFed0t/invest_helper_bot/internal/model/moexModel"
	"github.com/KotFed0t/invest_helper_bot/internal/model/tg/tgCallback.go"
	"github.com/shopspring/decimal"
	tele "gopkg.in/telebot.v4"
)

func PortfolioDetailsResponse(portfolio model.Portfolio) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	sb.WriteString(fmt.Sprintf("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: %s\n", portfolio.Name))
	sb.WriteString(fmt.Sprintf("üí∞ –ë–∞–ª–∞–Ω—Å: %s ‚ÇΩ\n", portfolio.TotalBalance.StringFixed(2)))
	sb.WriteString(fmt.Sprintf(" - –¢–µ–∫—É—â–∏–π –≤–µ—Å %s\n", portfolio.TotalWeight.StringFixed(2)))

	// –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	sb.WriteString("üìã –°–æ—Å—Ç–∞–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n\n")
	stockBtns := make([]tele.Btn, 0, len(portfolio.Stocks))
	for _, stock := range portfolio.Stocks {
		// –≠–º–æ–¥–∑–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
		emoji := fmt.Sprintf("%dÔ∏è‚É£", stock.Ordinal)

		stockBtns = append(stockBtns, markup.Data(stock.Ticker, tgCallback.AddStock+stock.Ticker))

		sb.WriteString(fmt.Sprintf("%s %s (%s)\n", emoji, stock.Ticker, stock.Shortname))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –í–µ—Å: %s\n", stock.ActualWeight.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å: %s\n", stock.TargetWeight.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –ö–æ–ª-–≤–æ: %d —à—Ç.\n", stock.Quantity))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %s ‚ÇΩ\n", stock.Price.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s ‚ÇΩ\n", stock.TotalPrice.StringFixed(2)))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: %d\n", stock.Lotsize))
		sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –ª–æ—Ç–∞: %s ‚ÇΩ\n", stock.Price.Mul(decimal.NewFromInt(int64(stock.Lotsize))).StringFixed(2)))
	}

	paginationBtns := make([]tele.Btn, 0, 2)
	if portfolio.CurPage > 0 {
		paginationBtns = append(paginationBtns, markup.Data("–ø—Ä–µ–¥—ã–¥—É—â–∞—è", tgCallback.PrevPagePrefix+strconv.Itoa((portfolio.CurPage-1))))
	}

	if portfolio.HasNextPage {
		paginationBtns = append(paginationBtns, markup.Data("—Å–ª–µ–¥—É—é—â–∞—è", tgCallback.NextPagePrefix+strconv.Itoa((portfolio.CurPage+1))))
	}

	addStockBtn := markup.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é", tgCallback.AddStock)
	markup.Inline(
		markup.Row(addStockBtn),
		markup.Row(stockBtns...),
		markup.Row(paginationBtns...),
	)

	return sb.String(), markup
}

func StockNotFoundMarkup() (markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	addStockBtn := markup.Data("–≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä", tgCallback.AddStock)
	markup.Inline(markup.Row(addStockBtn))
	return markup
}

func StockDetailResponse(stock model.Stock, stockChanges *model.StockChanges) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	sb := strings.Builder{}

	sb.WriteString(fmt.Sprintf("%s (%s)\n", stock.Ticker, stock.Shortname))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –í–µ—Å: %s %%\n", stock.ActualWeight.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: %s %%\n", stock.TargetWeight.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –ö–æ–ª-–≤–æ: %d —à—Ç.\n", stock.Quantity))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %s ‚ÇΩ\n", stock.Price.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s ‚ÇΩ\n", stock.TotalPrice.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: %d\n", stock.Lotsize))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –ª–æ—Ç–∞: %s ‚ÇΩ\n", stock.Price.Mul(decimal.NewFromInt(int64(stock.Lotsize))).StringFixed(2)))

	row1 := make([]tele.Btn, 0, 2)

	if stock.Quantity > 0 {
		sellStockBtn := markup.Data("–ø—Ä–æ–¥–∞—Ç—å", tgCallback.SellStock)
		row1 = append(row1, sellStockBtn)
	}

	buyStockBtn := markup.Data("–∫—É–ø–∏—Ç—å", tgCallback.BuyStock)
	row1 = append(row1, buyStockBtn)

	changeWeightStockBtn := markup.Data("–∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", tgCallback.ChangeWeight)

	deleteStockBtn := markup.Data("—É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", "TODO")

	var changePriceBtn tele.Btn
	var saveBtn tele.Btn

	if stockChanges != nil {
		sb.WriteString("\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n")
		if stockChanges.NewTargetWeight != nil {
			sb.WriteString(fmt.Sprintf("‚ñ∏ –ù–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å: %s %%\n", stockChanges.NewTargetWeight.StringFixed(2)))
		}

		if stockChanges.Quantity != nil {
			var operation string
			if *stockChanges.Quantity < 0 {
				operation = "–ø—Ä–æ–¥–∞–∂–∏"
			} else {
				operation = "–ø–æ–∫—É–ø–∫–∏"
			}

			changePriceBtn = markup.Data(fmt.Sprintf("–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É %s", operation), tgCallback.ChangePrice)

			if *stockChanges.Quantity > 0 {
				sb.WriteString(fmt.Sprintf("‚ñ∏ –ê–∫—Ü–∏–π –∫ –ø–æ–∫—É–ø–∫–µ: %d —à—Ç.\n", *stockChanges.Quantity))
			}

			if *stockChanges.Quantity < 0 {
				sb.WriteString(fmt.Sprintf("‚ñ∏ –ê–∫—Ü–∏–π –∫ –ø—Ä–æ–¥–∞–∂–µ: %d —à—Ç.\n", *stockChanges.Quantity*-1))
			}
			

			var stockPrice, totalSum string

			if stockChanges.CustomPrice != nil {
				stockPrice = stockChanges.CustomPrice.StringFixed(2)

				totalSum = stockChanges.CustomPrice.
					Mul(decimal.NewFromInt(int64(*stockChanges.Quantity))).
					Abs().
					StringFixed(2)
			} else {
				stockPrice = stock.Price.StringFixed(2)

				totalSum = stock.Price.
					Mul(decimal.NewFromInt(int64(*stockChanges.Quantity))).
					Abs().
					StringFixed(2)
			}
			sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é: %s ‚ÇΩ\n", stockPrice))
			sb.WriteString(fmt.Sprintf("‚ñ∏ –°—É–º–º–∞ %s: %s ‚ÇΩ\n", operation, totalSum))
		}

		saveBtn = markup.Data("—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", tgCallback.SaveStockChanges)
	}

	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", "TODO")

	markup.Inline(
		row1,
		markup.Row(changePriceBtn),
		markup.Row(changeWeightStockBtn),
		markup.Row(deleteStockBtn),
		markup.Row(backToPortfolioBtn),
		markup.Row(saveBtn),
	)

	return sb.String(), markup
}

func StockAddResponse(stock moexModel.StockInfo) (text string, markup *tele.ReplyMarkup) {
	markup = &tele.ReplyMarkup{}
	sb := strings.Builder{}

	sb.WriteString(fmt.Sprintf("%s (%s)\n", stock.Ticker, stock.Shortname))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –∞–∫—Ü–∏–∏: %s ‚ÇΩ\n", stock.Price.StringFixed(2)))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: %d\n", stock.Lotsize))
	sb.WriteString(fmt.Sprintf("‚ñ∏ –¶–µ–Ω–∞ –ª–æ—Ç–∞: %s ‚ÇΩ\n", stock.Price.Mul(decimal.NewFromInt(int64(stock.Lotsize))).StringFixed(2)))

	addToPortfolioBtn := markup.Data("–¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å", tgCallback.AddStockToPortfolio)

	addAnotherStockBtn := markup.Data("–≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä", tgCallback.AddStock)

	backToPortfolioBtn := markup.Data("–Ω–∞–∑–∞–¥ –∫ –ø–æ—Ä—Ç—Ñ–µ–ª—é", "TODO")

	markup.Inline(
		markup.Row(addToPortfolioBtn),
		markup.Row(addAnotherStockBtn),
		markup.Row(backToPortfolioBtn),
	)

	return sb.String(), markup
}
